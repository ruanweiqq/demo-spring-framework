<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:redis="http://www.springframework.org/schema/redis"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd 
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd 
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd 
        http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd"
	default-init-method="init" default-destroy-method="destroy">

	<!-- ==========A.Core:IoC========== -->
	<!-- refer to smoke-test-core and smoke-test-withoutAnnotation for details -->
	<context:component-scan
		base-package="org.ruanwei.demo.springframework">
	</context:component-scan>

	<context:property-placeholder
		location="classpath*:jdbc.properties" file-encoding="UTF-8" order="0" />

    <!-- ==========A.Core:AOP and Instrumentation========== -->
	<!-- refer to smoke-test-core and smoke-test-withoutAnnotation for details -->
	<aop:aspectj-autoproxy />
	
	<!-- ==========B.Data Access:DAO/Transaction/JDBC/ORM/OXM/Spring Data========== -->	
	<!-- B.0.Transaction -->
	<!-- refer to smoke-test-withoutAnnotation for details -->
	<tx:annotation-driven
		transaction-manager="txManager" />
	
	<!-- B.1.JDBC -->
	<bean id="userJdbcDao"
		class="org.ruanwei.demo.springframework.dataAccess.jdbc.UserJdbcDao">
		<property name="dataSource" ref="springDataSource" />
	</bean>
	<!-- PlatformTransactionManager:local transaction manager for plain JDBC -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		primary="true">
		<property name="dataSource" ref="springDataSource" />
	</bean>
	
	<!-- B.2.ORM -->
	<!-- B.2.1.JPA -->
	<!-- <bean id="userJpaDao"
		class="org.ruanwei.demo.springframework.dataAccess.orm.jpa.UserJpaDao">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>-->
	<!-- PlatformTransactionManager:local transaction manager for JPA -->
	<bean id="jpaTransactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
		<property name="dataSource" ref="springDataSource" />
	</bean>
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="springDataSource" />
		<property name="packagesToScan"
			value="org.ruanwei.demo.springframework.dataAccess.orm.jpa.entity" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="jpaVendorAdapter">
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<!-- <property name="loadTimeWeaver">
			<bean
				class="org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver" />
		</property> -->
	</bean>
	
	<!-- B.2.2.Hibernate -->
	<!-- <bean id="userHibernateDao"
		class="org.ruanwei.demo.springframework.dataAccess.orm.hibernate.UserHibernateDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean> -->
	<!-- PlatformTransactionManager:local transaction manager for Hibernate -->
	<!-- <bean id="hibernateTransactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="springDataSource" />
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="springDataSource" />
		<property name="packagesToScan"
			value="org.ruanwei.demo.springframework.dataAccess.orm.jpa.entity" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>  -->
	
	<!-- B.2.3.MyBatis -->
	<!-- <bean id="userMybatisDao"
		class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="mapperInterface"
			value="org.ruanwei.demo.springframework.dataAccess.orm.mybatis.UserMybatisDao" />
	</bean>
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation"
			value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource1" />
	</bean> -->
	
	<!-- global transaction manager for JTA -->
	<!-- <bean id="jtaTransactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager"/> -->
	
	<!-- B.3.DataSource -->
	<jdbc:initialize-database
		data-source="embeddedDataSource">
		<jdbc:script location="classpath:db/db-schema-hsql.sql" />
		<jdbc:script location="classpath:db/db-test-data.sql" />
	</jdbc:initialize-database>
	
	<!-- B.3.1.Embedded DataSource:HSQL/H2/DERBY -->
	<jdbc:embedded-database id="embeddedDataSource"
		type="HSQL" generate-name="true">
		<jdbc:script location="classpath:db/db-schema-hsql.sql" />
		<jdbc:script location="classpath:db/db-test-data.sql" />
	</jdbc:embedded-database>

	<!-- B.3.2.Plain JDBC DataSource(no pooling for test only) -->
	<bean id="springDataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		primary="true">
		<qualifier value="dataSource1" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- B.3.3.Hikari DataSource -->
	<bean id="hikariDataSource"
		class="com.zaxxer.hikari.HikariDataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="dataSource2" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="DataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlDataSource" />
	</bean>

	<!-- B.3.4.Vibur DataSource -->
	<bean id="viburDBCPDataSource"
		class="org.vibur.dbcp.ViburDBCPDataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="dataSource3" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- B.3.5.Tomcat JDBC DataSource(a replacement or an alternative to dbcp2) -->
	<bean id="tomcatDataSource"
		class="org.apache.tomcat.jdbc.pool.DataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="dataSource4" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- B.3.6.DBCP2 DataSource(Last update:2018-07-16 2.5.0, see PoolingDataSource) -->
	<bean id="dbcp2DataSource"
		class="org.apache.commons.dbcp2.BasicDataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="dataSource5" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="initialSize" value="10" />
		<property name="maxTotal" value="100" />
		<property name="maxIdle" value="100" />
		<property name="maxWaitMillis" value="-1" />
	</bean>
	
	<!-- B.3.7.C3P0 DataSource(Last update:2015-12-09 0.9.5.2) -->
	<bean id="c3p0DataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="dataSource6" />
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="10" />
		<!-- 连接池中保留的最大连接数。Default:15 -->
		<property name="maxPoolSize" value="100" />
		<!-- 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default:0 -->
		<property name="maxIdleTime" value="1800" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default:3 -->
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default:0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default:30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	
	<!-- B.3.8.JNDI DataSource -->
	<!-- <jee:jndi-lookup id="jndiDataSource" jndi-name="java:comp/env/jdbc/myds"/> -->
		
	<!-- B.4.OXM -->
	<bean id="marshallerClient"
		class="org.ruanwei.demo.springframework.dataAccess.oxm.MarshallerClient">
		<property name="marshaller" ref="castorMarshaller" />
		<property name="unmarshaller" ref="castorMarshaller" />
	</bean>

	<!-- 等价于org.springframework.oxm.castor.CastorMarshaller.Castor project is not active. -->
	<oxm:castor-marshaller id="castorMarshaller"
		mapping-location="classpath:mapping.xml" />

	<!-- 等价于org.springframework.oxm.jaxb.Jaxb2Marshaller -->
	<oxm:jaxb2-marshaller id="jaxb2Marshaller"
		context-path="org.ruanwei.demo.springframework.dataAccess.oxm">
		<oxm:class-to-be-bound
			name="org.ruanwei.demo.springframework.dataAccess.oxm.Settings" />
	</oxm:jaxb2-marshaller>

	<!-- 等价于org.springframework.oxm.jibx.JibxMarshaller.JiBX project is not active. -->
	<oxm:jibx-marshaller id="jibxMarshaller"
		target-class="org.ruanwei.demo.springframework.dataAccess.oxm.Settings" />

	<bean id="xstreamMarshaller"
		class="org.springframework.oxm.xstream.XStreamMarshaller">
		<property name="supportedClasses"
			value="org.ruanwei.demo.springframework.dataAccess.oxm.Settings" />
		<property name="aliases">
			<props>
				<prop key="Settings">org.ruanwei.demo.springframework.dataAccess.oxm.Settings
				</prop>
			</props>
		</property>
	</bean>
	
	<!-- ==========B.Data Access:Spring Data========== -->
	<!-- B.1.Spring Data:JDBC -->
	<!-- <repositories
		base-package="org.ruanwei.demo.springframework.dataAccess.springdata.jdbc" /> -->
		
	<!-- B.2.Spring Data:JPA -->
	<!-- <jpa:repositories
		base-package="org.ruanwei.demo.springframework.dataAccess.springdata.jpa">
	</jpa:repositories> -->
	
	<!-- B.3.Spring Data:Redis -->
	<!-- <bean id="redisClient"
		class="org.ruanwei.demo.springframework.dataAccess.springdata.redis.RedisClient">
		<property name="redisTemplate" ref="redisTemplate" />
		<property name="stringRedisTemplate"
			ref="stringRedisTemplate" />
	</bean>

	<bean id="redisTemplate"
		class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory"
		p:enable-transaction-support="true"
		p:key-serializer-ref="stringRedisSerializer"
		p:value-serializer-ref="stringRedisSerializer"
		p:hashKey-serializer-ref="stringRedisSerializer"
		p:hashValue-serializer-ref="stringRedisSerializer" />

	<bean id="stringRedisTemplate"
		class="org.springframework.data.redis.core.StringRedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory"
		p:enable-transaction-support="true" />

	Redis Messaging Receiver:RedisMessageListenerContainer
	<redis:listener-container
		connection-factory="jedisConnectionFactory"
		topic-serializer="stringRedisSerializer">
		the method attribute can be skipped as the default method name is 
			"handleMessage"
		<redis:listener ref="myRedisMessageListener1"
			topic="myChannel" serializer="stringRedisSerializer" />
		<redis:listener ref="myRedisMessageListener2"
			method="handleMessage" topic="myChannel"
			serializer="stringRedisSerializer" />
	</redis:listener-container>
	<bean id="myRedisMessageListener1"
		class="org.ruanwei.demo.springframework.integration.redis.xml.MyMessageListener" />
	<bean id="myRedisMessageListener2"
		class="org.ruanwei.demo.springframework.integration.redis.xml.MyMessageDelegate" /> -->
	<!-- 等价于上面 -->
	<!-- <bean id="redisMessageListenerContainer"
		class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="messageListeners">
			<map>
				<entry key-ref="myRedisMessageListener1">
					<bean class="org.springframework.data.redis.listener.ChannelTopic">
						<constructor-arg value="myChannel" />
					</bean>
				</entry>
			</map>
		</property>
	</bean> -->

	<!-- <bean id="stringRedisSerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer" />

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="localhost" p:port="6379" p:use-pool="true"
		p:pool-config-ref="jedisPoolConfig" />
	<bean id="lettuceConnectionFactory" class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory" 
		p:host-name="localhost" p:port="6379" />

	<bean id="jedisPoolConfig"
		class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="32" />
		<property name="maxIdle" value="6" />
		<property name="testOnBorrow" value="true" />
	</bean>

	<bean id="sentinelConfiguration"
		class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<property name="master" value="myMaster" />
		<property name="sentinels">
			<set>
				<bean
					class="org.springframework.data.redis.connection.RedisNode"
					p:host="localhost" p:port="26379" />
				<bean
					class="org.springframework.data.redis.connection.RedisNode"
					p:host="localhost" p:port="26380" />
			</set>
		</property>
	</bean>

	<bean id="clusterConfiguration"
		class="org.springframework.data.redis.connection.RedisClusterConfiguration">
		<property name="maxRedirects" value="" />
		<property name="clusterNodes">
			<set>
				<bean
					class="org.springframework.data.redis.connection.RedisNode"
					p:host="localhost" p:port="6379" />
				<bean
					class="org.springframework.data.redis.connection.RedisNode"
					p:host="localhost" p:port="6380" />
			</set>
		</property>
	</bean> -->
</beans>