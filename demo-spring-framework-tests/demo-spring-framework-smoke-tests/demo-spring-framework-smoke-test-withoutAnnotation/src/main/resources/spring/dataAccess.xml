<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:repository="https://www.springframework.org/schema/data/repository"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:redis="http://www.springframework.org/schema/redis"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd 
        http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd  
        http://www.springframework.org/schema/data/jpa https://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        https://www.springframework.org/schema/data/repository https://www.springframework.org/schema/data/repository/spring-repository.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd 
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd 
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd 
        http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd">

	<context:property-placeholder
		location="classpath*:jdbc.properties" file-encoding="UTF-8" order="0" />
	
	<!-- ==========B.Data Access:DAO/Transaction/JDBC/ORM/OXM/Spring Data========== -->	
	<!-- B.0.Transaction -->
	<aop:config>
		<aop:pointcut id="jdbcPointcut"
			expression="execution(* org.ruanwei.demo.springframework.dataAccess.jdbc.*Dao.*(..))" />
		<aop:pointcut id="jpaPointcut"
			expression="execution(* org.ruanwei.demo.springframework.dataAccess.orm.jpa.*Dao.*(..))" />
		<aop:pointcut id="hibernatePointcut"
			expression="execution(* org.ruanwei.demo.springframework.dataAccess.orm.hibernate.*Dao.*(..))" />
		<aop:pointcut id="mybatisPointcut"
			expression="execution(* org.ruanwei.demo.springframework.dataAccess.orm.mybatis.*Dao.*(..))" />
		<aop:pointcut id="repositoryPointcut"
			expression="execution(* org.ruanwei.demo.springframework.dataAccess.springdata.*.*Repository.*(..))" />

		<aop:advisor advice-ref="jdbcTxAdvice"
			pointcut-ref="jdbcPointcut" order="1" />
		<aop:advisor advice-ref="jpaTxAdvice"
			pointcut-ref="jpaPointcut" order="2" />
		<aop:advisor advice-ref="hibernateTxAdvice"
			pointcut-ref="hibernatePointcut" order="3" />
		<aop:advisor advice-ref="jdbcTxAdvice"
			pointcut-ref="mybatisPointcut" order="4" />
		<aop:advisor advice-ref="jdbcTxAdvice"
			pointcut-ref="repositoryPointcut" order="5" />
		<!-- execute before the transactional advice (hence the lower order number) -->
		<!-- <aop:aspect id="myAspect3" ref="myAdvice" order="1">
			<aop:pointcut id="daoPointcut2"
				expression="execution(* org.ruanwei.demo.springframework.dataAccess.jdbc.*DAO.*(..)) 
			and args(name,age)" />
			<aop:around pointcut-ref="daoPointcut2" method="profile" />
		</aop:aspect> -->
	</aop:config>
	<!-- see TransactionProxyFactoryBean -->
	<tx:advice id="jdbcTxAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="transactionalMethod1"
				propagation="REQUIRED" rollback-for="java.lang.ArithmeticException" />
			<tx:method name="transactionalMethod2"
				propagation="REQUIRES_NEW" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<tx:advice id="jpaTxAdvice"
		transaction-manager="jpaTransactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="transactionalMethod1"
				propagation="REQUIRED" rollback-for="java.lang.ArithmeticException" />
			<tx:method name="transactionalMethod2"
				propagation="REQUIRES_NEW" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<tx:advice id="hibernateTxAdvice"
		transaction-manager="hibernateTransactionManager">
		<tx:attributes>
			<!-- all methods starting with 'query' are read only -->
			<tx:method name="find*" read-only="true" />
			<tx:method name="transactionalMethod1"
				propagation="REQUIRED" rollback-for="java.lang.ArithmeticException" />
			<tx:method name="transactionalMethod2"
				propagation="REQUIRES_NEW" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<!-- B.1.JDBC -->
	<bean id="userJdbcDao"
		class="org.ruanwei.demo.springframework.dataAccess.jdbc.UserJdbcDao">
		<property name="dataSource" ref="springDataSource" />
		<property name="userTransactionnalJdbcDao"
			ref="userTransactionnalJdbcDao" />
	</bean>
	<bean id="userTransactionnalJdbcDao"
		class="org.ruanwei.demo.springframework.dataAccess.jdbc.UserTransactionJdbcDao">
		<property name="dataSource" ref="springDataSource" />
	</bean>
	<!-- PlatformTransactionManager:local transaction manager for plain JDBC -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		primary="true">
		<property name="dataSource" ref="springDataSource" />
	</bean>
	
	<!-- B.2.ORM -->
	<!-- B.2.1.JPA -->
	<bean id="userJpaDao"
		class="org.ruanwei.demo.springframework.dataAccess.orm.jpa.UserJpaDao">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
		<property name="userTransactionnalJpaDao"
			ref="userTransactionnalJpaDao" />
	</bean>
	<bean id="userTransactionnalJpaDao"
		class="org.ruanwei.demo.springframework.dataAccess.orm.jpa.UserTransactionJpaDao">
		<!-- <property name="entityManagerFactory"
			ref="entityManagerFactory" /> -->
	</bean>
	<!-- PlatformTransactionManager:local transaction manager for JPA -->
	<!-- see HibernateTransactionManager -->
	<bean id="jpaTransactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<!-- <property name="entityManagerFactory"
			ref="entityManagerFactory" /> -->
		<!-- 注意：这里使用的是sessionFactory而不是entityManagerFactory -->
		<property name="entityManagerFactory" ref="sessionFactory" />
		<property name="dataSource" ref="hikariDataSource" />
		<property name="jpaDialect">
			<!-- org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect -->
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
	</bean>
	<!-- see LocalSessionFactoryBean -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<qualifier value="entityManagerFactory" />
		<property name="dataSource" ref="hikariDataSource" />
		<property name="packagesToScan"
			value="org.ruanwei.demo.springframework.dataAccess.orm.jpa.entity" />
		<property name="jpaVendorAdapter">
			<!-- org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter -->
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaDialect">
			<!-- org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect -->
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
		<property name="bootstrapExecutor">
			<bean
				class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
		</property>
		<property name="loadTimeWeaver">
			<!-- org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver -->
			<bean
				class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		
		<!-- JPA providers of Hibernate does not require a JVM agent -->
	</bean>
	
	<!-- B.2.2.Hibernate -->
	<bean id="userHibernateDao"
		class="org.ruanwei.demo.springframework.dataAccess.orm.hibernate.UserHibernateDao">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="userTransactionnalHibernateDao"
			ref="userTransactionnalHibernateDao" />
	</bean>
	<bean id="userTransactionnalHibernateDao"
		class="org.ruanwei.demo.springframework.dataAccess.orm.hibernate.UserTransactionHibernateDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- LocalSessionFactoryBean and HibernateTransactionManager are alternative to LocalContainerEntityManagerFactoryBean and JpaTransactionManager for common JPA purposes -->
	<!-- PlatformTransactionManager:local transaction manager for Hibernate -->
	<bean id="hibernateTransactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="hikariDataSource" />
	</bean>

	<!-- implements JPA EntityManagerFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
		primary="true">
		<qualifier value="sessionFactory" />
		<property name="dataSource" ref="hikariDataSource" />
		<property name="packagesToScan"
			value="org.ruanwei.demo.springframework.dataAccess.orm.*.entity" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	
	<!-- B.2.3.MyBatis -->
	<mybatis:scan
		base-package="org.ruanwei.demo.springframework.dataAccess.orm.mybatis"
		factory-ref="sqlSessionFactory"
		mapper-factory-bean-class="org.mybatis.spring.mapper.MapperFactoryBean" />
	<!-- SqlSessionFactory和TransactionManager使用的DataSource要一致 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="springDataSource" />
		<property name="configuration">
			<bean class="org.apache.ibatis.session.Configuration">
				<property name="mapUnderscoreToCamelCase" value="true" />
			</bean>
		</property>
		<!-- <property name="configLocation"
			value="classpath:mybatis/mybatis-config.xml" /> -->
		<!-- 简单SQL使用注解，复杂SQL使用XML文件 -->
		<property name="mapperLocations"
			value="classpath*:mybatis/*-mapper.xml" />
	</bean>
	
	<!-- global transaction manager for JTA -->
	<!-- JtaTransactionManagerFactoryBean -->
	<!-- <bean id="jtaTransactionManager"
		class="org.springframework.transaction.config.JtaTransactionManagerFactoryBean"/> -->
	<!-- <tx:jta-transaction-manager /> -->
	
	<!-- B.3.DataSource -->
	<jdbc:initialize-database
		data-source="embeddedDataSource">
		<jdbc:script location="classpath:db/db-schema-hsql.sql" />
		<jdbc:script location="classpath:db/db-test-data.sql" />
	</jdbc:initialize-database>
	
	<!-- B.3.1.Embedded DataSource:HSQL/H2/DERBY -->
	<jdbc:embedded-database id="embeddedDataSource"
		type="HSQL" generate-name="true">
		<jdbc:script location="classpath:db/db-schema-hsql.sql" />
		<jdbc:script location="classpath:db/db-test-data.sql" />
	</jdbc:embedded-database>

	<!-- B.3.2.Plain JDBC DataSource(no pooling for test only) -->
	<bean id="springDataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		primary="true">
		<qualifier value="springDataSource" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- B.3.3.Hikari DataSource -->
	<bean id="hikariDataSource"
		class="com.zaxxer.hikari.HikariDataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="hikariDataSource" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- <property name="DataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlDataSource" /> -->
	</bean>

	<!-- B.3.4.Vibur DataSource -->
	<bean id="viburDBCPDataSource"
		class="org.vibur.dbcp.ViburDBCPDataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="viburDBCPDataSource" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- B.3.5.Tomcat JDBC DataSource(a replacement or an alternative to dbcp2) -->
	<bean id="tomcatDataSource"
		class="org.apache.tomcat.jdbc.pool.DataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="tomcatDataSource" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- B.3.6.DBCP2 DataSource(Last update:2018-07-16 2.5.0, see PoolingDataSource) -->
	<bean id="dbcp2DataSource"
		class="org.apache.commons.dbcp2.BasicDataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="dbcp2DataSource" />
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="initialSize" value="10" />
		<property name="maxTotal" value="100" />
		<property name="maxIdle" value="100" />
		<property name="maxWaitMillis" value="-1" />
	</bean>
	
	<!-- B.3.7.C3P0 DataSource(Last update:2015-12-09 0.9.5.2) -->
	<bean id="c3p0DataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" lazy-init="true"
		destroy-method="close">
		<qualifier value="c3p0DataSource" />
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="10" />
		<!-- 连接池中保留的最大连接数。Default:15 -->
		<property name="maxPoolSize" value="100" />
		<!-- 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default:0 -->
		<property name="maxIdleTime" value="1800" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default:3 -->
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default:0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default:30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	
	<!-- B.3.8.JNDI DataSource -->
	<!-- <jee:jndi-lookup id="jndiDataSource" jndi-name="java:comp/env/jdbc/myds"/> -->
	
	<!-- B.4.OXM -->
	<!-- <bean id="marshallerClient"
		class="org.ruanwei.demo.springframework.dataAccess.oxm.MarshallerClient">
		<property name="marshaller" ref="castorMarshaller" />
		<property name="unmarshaller" ref="castorMarshaller" />
	</bean>
 -->
	<!-- 等价于org.springframework.oxm.castor.CastorMarshaller -->
	<!-- <oxm:castor-marshaller id="castorMarshaller"
		mapping-location="classpath:mapping.xml" /> -->

	<!-- 等价于org.springframework.oxm.jaxb.Jaxb2Marshaller -->
	<!-- <oxm:jaxb2-marshaller id="jaxb2Marshaller"
		context-path="org.ruanwei.demo.springframework.dataAccess.oxm">
		<oxm:class-to-be-bound
			name="org.ruanwei.demo.springframework.dataAccess.oxm.Settings" />
	</oxm:jaxb2-marshaller> -->

	<!-- 等价于org.springframework.oxm.jibx.JibxMarshaller -->
	<!-- <oxm:jibx-marshaller id="jibxMarshaller"
		target-class="org.ruanwei.demo.springframework.dataAccess.oxm.Settings" /> -->

	<!-- <bean id="xstreamMarshaller"
		class="org.springframework.oxm.xstream.XStreamMarshaller">
		<property name="supportedClasses"
			value="org.ruanwei.demo.springframework.dataAccess.oxm.Settings" />
		<property name="aliases">
			<props>
				<prop key="Settings">org.ruanwei.demo.springframework.dataAccess.oxm.Settings
				</prop>
			</props>
		</property>
	</bean> -->
	
	<!-- ==========B.Data Access:Spring Data========== -->

</beans>